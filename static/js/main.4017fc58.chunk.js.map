{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","api/comments.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","selectPostId","className","length","map","post","userId","title","body","type","onClick","id","request","url","action","a","fetch","response","json","NewCommentForm","handleAddComment","commentsLength","useState","setId","name","email","makeComment","setMakeComment","handleChange","event","target","value","prev","onSubmit","e","preventDefault","newComment","postId","placeholder","onChange","required","PostDetails","comments","setComments","postDetails","setPostDetails","isVisible","setIsVisible","useEffect","then","data","handleDeleteComment","commentId","method","deleteComment","filter","comment","prevComments","headers","JSON","stringify","addComment","App","users","setUsers","setPosts","selectedUser","setSelectedUser","setSelectedPostId","user","ReactDOM","render","document","getElementById"],"mappings":"kTAUaA,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,eACAC,EACI,EADJA,aAEA,OACE,sBAAKC,UAAU,YAAf,UACE,wCACA,mCACGH,EAAMI,OAAS,EACd,oBAAID,UAAU,kBAAkB,UAAQ,cAAxC,SACGH,EAAMK,KAAI,SAAAC,GAAI,OACb,qBACEH,UAAU,kBADZ,UAIE,gCACE,uCAEG,IACAG,EAAKC,OAHR,KAKG,OAEFD,EAAKE,MACLF,EAAKG,QAER,wBACEC,KAAK,SACLP,UAAU,2BACVQ,QAAS,kBAAMT,EAAaI,EAAKM,KAHnC,SAKGX,IAAmBK,EAAKM,GAAK,QAAU,WAlBrCN,EAAKM,SAwBhB,mD,gCC9CGC,EAAO,uCAAG,WAAOC,EAAaC,GAApB,eAAAC,EAAA,+EAEIC,MAAM,GAAD,OAJR,qCAIQ,OAAeH,GAAOC,GAF/B,cAEbG,EAFa,gBAINA,EAASC,OAJH,kLAAH,wD,cCQPC,G,MAAkC,SAAC,GAIzC,IAHLC,EAGI,EAHJA,iBACApB,EAEI,EAFJA,eACAqB,EACI,EADJA,eAEA,EAAoBC,mBAASD,GAA7B,mBAAOV,EAAP,KAAWY,EAAX,KACA,EAAsCD,mBAAS,CAC7CE,KAAM,GACNC,MAAO,GACPjB,KAAM,KAHR,mBAAOkB,EAAP,KAAoBC,EAApB,KAMMC,EAAe,SACnBC,GAEA,MAAwBA,EAAMC,OAAtBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MAEdJ,GAAe,SAAAK,GAAI,kCACdA,GADc,kBAEhBR,EAAOO,QA4BZ,OACE,uBACE7B,UAAU,iBACV+B,SAnBiB,SAACC,GAIpB,GAHAA,EAAEC,iBACFZ,GAAO,SAAAS,GAAI,OAAIA,EAAO,KAElBN,EAAa,CACf,IAAMU,EAAmB,aACvBzB,KACA0B,OAAQrC,GACL0B,GAGLN,EAAiBgB,GAlBnBT,EAAe,CACbH,KAAM,GACNC,MAAO,GACPjB,KAAM,OAqBR,UAIE,qBAAKN,UAAU,aAAf,SACE,uBACEO,KAAK,OACLe,KAAK,OACLc,YAAY,YACZpC,UAAU,wBACV6B,MAAOL,EAAYF,KACnBe,SAAUX,EACVY,UAAQ,MAIZ,qBAAKtC,UAAU,aAAf,SACE,uBACEO,KAAK,QACLe,KAAK,QACLc,YAAY,aACZpC,UAAU,wBACV6B,MAAOL,EAAYD,MACnBc,SAAUX,EACVY,UAAQ,MAIZ,qBAAKtC,UAAU,aAAf,SACE,0BACEsB,KAAK,OACLc,YAAY,oBACZpC,UAAU,wBACV6B,MAAOL,EAAYlB,KACnB+B,SAAUX,EACVY,UAAQ,MAIZ,wBACE/B,KAAK,SACLP,UAAU,uCAFZ,gCCjFOuC,G,MAA+B,SAAC,GAAwB,IAAtBzC,EAAqB,EAArBA,eAC7C,EAAgCsB,mBAAoB,IAApD,mBAAOoB,EAAP,KAAiBC,EAAjB,KACA,EAAsCrB,mBAAsB,MAA5D,mBAAOsB,EAAP,KAAoBC,EAApB,KACA,EAAkCvB,oBAAS,GAA3C,mBAAOwB,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WCZkB,IAACX,KDaZrC,ECZVY,EAAQ,UAAD,OAAWyB,KDapBY,MAAK,SAAAC,GAAI,OAAIL,EAAeK,QAC9B,CAAClD,IAEJgD,qBAAU,WEvBmB,IAACX,KFwBZrC,EEvBXY,EAAQ,oBAAD,OAAqByB,KFwB9BY,MAAK,SAAAC,GAAI,OAAIP,EAAYO,QAC3B,CAAClD,IAEJ,IAAMmD,EAAsB,SAACC,IExBF,SAACA,GACrBxC,EAAQ,aAAD,OAAcwC,GAAa,CAAEC,OAAQ,WFwBjDC,CAAcF,GACdT,EAAYD,EAASa,QAAO,SAAAC,GAAO,OAAIA,EAAQ7C,KAAOyC,OAkBxD,OACE,qBAAKlD,UAAU,cAAf,SACGF,EAEG,qCACE,sDAEG4C,QAFH,IAEGA,OAFH,EAEGA,EAAatC,UAGhB,yBAASJ,UAAU,oBAAnB,SACE,mCAAI0C,QAAJ,IAAIA,OAAJ,EAAIA,EAAarC,UAGnB,0BAASL,UAAU,wBAAnB,UACGwC,EAASvC,OAAS,EAEf,wBACEM,KAAK,SACLP,UAAU,SACVQ,QA9BM,WACtBqC,GAAcD,IA8BE,UAAQ,cAJV,UAtBLA,GAAaJ,EAASvC,OAAS,EAAjC,eACKuC,EAASvC,OADd,4BAEKuC,EAASvC,OAFd,eA+BO,gDAEH2C,GACC,oBAAI5C,UAAU,oBAAd,SACGwC,EAAStC,KAAI,SAAAoD,GAAO,OACnB,qBACEtD,UAAU,yBADZ,UAIE,wBACEO,KAAK,SACLP,UAAU,oCACVQ,QAAS,kBAAMyC,EAAoBK,EAAQ7C,KAH7C,eAOA,4BAAI6C,EAAQhD,SATPgD,EAAQ7C,YAgBvB,kCACE,qBAAKT,UAAU,4BAAf,SACE,cAAC,EAAD,CACEF,eAAgBA,EAChBqB,eAAgBqB,EAASvC,OACzBiB,iBArES,SAACgB,GACxBO,GAAY,SAAAc,GAAY,OAAKrB,GAAL,mBAAoBqB,OE1BtB,SAACrB,GAClBxB,EAAQ,YAAa,CAC1ByC,OAAQ,OACRK,QAAS,CACP,eAAgB,mCAElBlD,KAAMmD,KAAKC,UAAUxB,KFqBrByB,CAAWzB,aA0EL,mDG5BK0B,G,YA1EO,WACpB,MAA0BxC,mBAAiB,IAA3C,mBAAOyC,EAAP,KAAcC,EAAd,KACA,EAA0B1C,mBAAiB,IAA3C,mBAAOvB,EAAP,KAAckE,EAAd,KACA,EAAwC3C,mBAAS,GAAjD,mBAAO4C,EAAP,KAAqBC,EAArB,KACA,EAA4C7C,mBAAS,GAArD,mBAAOtB,EAAP,KAAuBoE,EAAvB,KA8BA,OAhBApB,qBAAU,WCxBHpC,EAAQ,WD0BVqC,MAAK,SAAAC,GAAI,OAAIc,EAASd,QACxB,IAEHF,qBAAU,WF9BgB,IAAC1C,KE+BZ4D,EF7BXtD,EADGN,EACK,iBAAD,OAAkBA,GACjB,WE6BP2C,MAAK,SAAAC,GAEFe,EADmB,IAAjBC,EACOhB,EAAKK,QAAO,SAAAc,GAAI,OAAIA,EAAK/D,SAAW4D,KAEpChB,QAGd,CAACgB,IAGF,sBAAKhE,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAEE,yBACEA,UAAU,qBACVqC,SAnCS,SAACV,GAClBsC,GAAiBtC,EAAMC,OAAOC,QAgCxB,UAIE,wBAAQA,MAAM,IAAd,uBACCgC,EAAM3D,KAAI,SAAAiE,GAAI,OACb,wBAEEtC,MAAOsC,EAAK1D,GAFd,SAIG0D,EAAK7C,MAHD6C,EAAK1D,eAUpB,uBAAMT,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,MAAOA,EACPC,eAAgBA,EAChBC,aAnDW,SAACoC,GAElB+B,EADEpE,IAAmBqC,EACH,EAEAA,QAkDhB,qBAAKnC,UAAU,eAAf,SACE,cAAC,EAAD,CACEF,eAAgBA,cExE5BsE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4017fc58.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  selectPostId: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  selectPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <>\n        {posts.length > 0 ? (\n          <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n            {posts.map(post => (\n              <li\n                className=\"PostsList__item\"\n                key={post.id}\n              >\n                <div>\n                  <b>\n                    [User:\n                    {' '}\n                    {post.userId}\n                    ]:\n                    {' '}\n                  </b>\n                  {post.title}\n                  {post.body}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => selectPostId(post.id)}\n                >\n                  {selectedPostId === post.id ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>\n            No posts yet\n          </p>\n        )}\n      </>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, action?:{}) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, action);\n\n    return await response.json();\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n};\n","import React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number,\n  commentsLength: number,\n  handleAddComment : (newComment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleAddComment,\n  selectedPostId,\n  commentsLength,\n}) => {\n  const [id, setId] = useState(commentsLength);\n  const [makeComment, setMakeComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    setMakeComment(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const reset = () => {\n    setMakeComment({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const handleSubmit = (e:React.FormEvent) => {\n    e.preventDefault();\n    setId((prev => prev + 1));\n\n    if (makeComment) {\n      const newComment: Comment = {\n        id,\n        postId: selectedPostId,\n        ...makeComment,\n      };\n\n      handleAddComment(newComment);\n      reset();\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={makeComment.name}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={makeComment.email}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={makeComment.body}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  addComment,\n  getPostComments,\n  deleteComment,\n} from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { getPostDetails } from '../../api/posts';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(data => setPostDetails(data));\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getPostComments(selectedPostId)\n      .then(data => setComments(data));\n  }, [selectedPostId]);\n\n  const handleDeleteComment = (commentId: number) => {\n    deleteComment(commentId);\n    setComments(comments.filter(comment => comment.id !== commentId));\n  };\n\n  const handleAddComment = (newComment: Comment) => {\n    setComments(prevComments => [newComment, ...prevComments]);\n    addComment(newComment);\n  };\n\n  const handleIsVisible = () => {\n    setIsVisible(!isVisible);\n  };\n\n  const toggleBtn = () => {\n    return (!isVisible && comments.length > 0)\n      ? `Show ${comments.length} comments`\n      : `Hide ${comments.length} comments`;\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {selectedPostId\n        ? (\n          <>\n            <h2>\n              Post details:\n              {postDetails?.userId}\n            </h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{postDetails?.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {comments.length > 0\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={handleIsVisible}\n                    data-cy=\"postDetails\"\n                  >\n                    {toggleBtn()}\n                  </button>\n                ) : (\n                  <p>No comments yet</p>\n                )}\n              {isVisible && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li\n                      className=\"PostDetails__list-item\"\n                      key={comment.id}\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => handleDeleteComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  selectedPostId={selectedPostId}\n                  commentsLength={comments.length}\n                  handleAddComment={handleAddComment}\n                />\n              </div>\n            </section>\n          </>\n        )\n        : (\n          <p>No details yet</p>\n        )}\n    </div>\n  );\n};\n","import { request } from './api';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = (userId?: number): Promise<Post[]> => {\n  return userId\n    ? request(`/posts?userId=${userId}`)\n    : request('/posts');\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return request(`/posts/${postId}`);\n};\n","import { request } from './api';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const addComment = (newComment: Comment) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\nimport { getUserPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUser(+event.target.value);\n  };\n\n  const selectPostId = (postId: number) => {\n    if (selectedPostId === postId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(data => setUsers(data));\n  }, []);\n\n  useEffect(() => {\n    getUserPosts(selectedUser)\n      .then(data => {\n        if (selectedUser !== 0) {\n          setPosts(data.filter(user => user.userId === selectedUser));\n        } else {\n          setPosts(data);\n        }\n      });\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            onChange={selectUser}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            selectPostId={selectPostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\nimport { User } from '../types/User';\n\nexport const getUsers = (): Promise<User[]> => {\n  return request('/users/');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}